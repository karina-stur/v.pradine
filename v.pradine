#include <iostream>
#include <vector>
#include <algorithm>
#include <iomanip>
#include <cstdlib>
#include <ctime>
using namespace std;

struct Studentas {
    string vardas;
    string pavarde;
    vector<int> namuDarbai;
    int egzaminas;
};

double skaiciuotiGalutiniVidurki(const vector<int>& namuDarbai, int egzaminas) {
    double vidurkis = 0;
    for (int nd : namuDarbai) {
        vidurkis += nd;
    }
    vidurkis /= namuDarbai.size();
    return 0.5 * vidurkis + 0.5 * egzaminas;
}

double skaiciuotiGalutiniMediana(vector<int> namuDarbai, int egzaminas) {
    sort(namuDarbai.begin(), namuDarbai.end());
    double mediana;
    int size = namuDarbai.size();
    if (size % 2 == 0) {
        mediana = (namuDarbai[size / 2 - 1] + namuDarbai[size / 2]) / 2.0;
    } else {
        mediana = namuDarbai[size / 2];
    }
    return 0.5 * mediana + 0.5 * egzaminas;
}

int generuotiAtsitiktiniBala(int min, int max) {
    return rand() % (max - min + 1) + min;
}

int main() {
    srand(static_cast<unsigned>(time(0)));

    vector<Studentas> studentai;
    int kiekMokiniu;
    int namuDarbaiKiekis;

    cout << "Kiek studentų norite įvesti? ";
    cin >> kiekMokiniu;
    cin.ignore(); // Clear newline character

    cout << "Kiek namų darbų pažymių norite generuoti kiekvienam studentui? ";
    cin >> namuDarbaiKiekis;
    cin.ignore(); // Clear newline character

    for (int i = 0; i < kiekMokiniu; i++) {
        Studentas studentas;

        cout << "Įveskite " << i + 1 << "-ojo studento vardą: ";
        getline(cin, studentas.vardas); // Correctly reads the name

        cout << "Įveskite " << i + 1 << "-ojo studento pavardę: ";
        getline(cin, studentas.pavarde); // Correctly reads the surname

        // Generuojami atsitiktiniai namų darbų rezultatai
        for (int j = 0; j < namuDarbaiKiekis; j++) {
            studentas.namuDarbai.push_back(generuotiAtsitiktiniBala(1, 10));
        }

        // Atsitiktinio egzamino rezultato generavimas
        studentas.egzaminas = generuotiAtsitiktiniBala(1, 10);

        // Pridėti studentą į vektorių
        studentai.push_back(studentas);
    }

    char pasirinkimas;
    cout << "Pasirinkite galutinio balo skaičiavimo būdą (v - vidurkis, m - mediana): ";
    cin >> pasirinkimas;
    cin.ignore(); // Clear newline character

    cout << endl;
    cout << left << setw(15) << "Vardas" << setw(15) << "Pavarde";
    if (pasirinkimas == 'v') {
        cout << setw(20) << "Galutinis (Vid.)" << endl;
    } else if (pasirinkimas == 'm') {
        cout << setw(20) << "Galutinis (Med.)" << endl;
    }
    cout << "--------------------------------------------------------------" << endl;

    for (const auto& studentas : studentai) {
        double galutinisBalas;
        if (pasirinkimas == 'v') {
            galutinisBalas = skaiciuotiGalutiniVidurki(studentas.namuDarbai, studentas.egzaminas);
        } else if (pasirinkimas == 'm') {
            galutinisBalas = skaiciuotiGalutiniMediana(studentas.namuDarbai, studentas.egzaminas);
        }

        cout << left << setw(15) << studentas.vardas
             << setw(15) << studentas.pavarde
             << setw(20) << fixed << setprecision(2) << galutinisBalas << endl;
    }

    return 0;
}

